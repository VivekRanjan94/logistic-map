{"version":3,"sources":["Graph.jsx","App.jsx","Utils/simulator.jsx","index.jsx"],"names":["Graph","data","width","height","chartType","loader","options","title","explorer","axis","keepInBounds","hAxis","vAxis","minValue","App","useState","r","setR","startPopulation","setStartPopulation","maxPopulation","setMaxPopulation","numberOfYears","setNumberOfYears","setData","updateData","startYear","i","ratio","newPopulation","push","parseInt","simulateYears","Date","getFullYear","useEffect","className","style","display","justifyContent","marginTop","id","type","min","max","value","onChange","e","Number","target","step","length","ReactDOM","render","StrictMode","document","querySelector"],"mappings":"mLA4BeA,EAzBD,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACf,OACE,8BACE,cAAC,IAAD,CACEC,MAAO,QACPC,OAAQ,QACRC,UAAU,YACVC,OAAQ,gDACRJ,KAAMA,EACNK,QAAS,CACPC,MAAO,eACPC,SAAU,CAAEC,KAAM,aAAcC,cAAc,GAC9CC,MAAO,CACLJ,MAAO,QAETK,MAAO,CACLC,SAAU,IACVN,MAAO,oBCuFJO,EAvGH,WACV,MAAkBC,mBAAS,KAA3B,mBAAOC,EAAP,KAAUC,EAAV,KACA,EAA8CF,mBAAS,KAAvD,mBAAOG,EAAP,KAAwBC,EAAxB,KACA,EAA0CJ,mBAAS,KAAnD,mBAAOK,EAAP,KAAsBC,EAAtB,KACA,EAA0CN,mBAAS,IAAnD,mBAAOO,EAAP,KAAsBC,EAAtB,KACA,EAAwBR,mBAAS,IAAjC,mBAAOd,EAAP,KAAauB,EAAb,KAEMC,EAAa,WACjBD,ECZyB,SAC3BR,EACAE,EACAE,EACAM,EACAJ,GAOA,IALA,IAAIrB,EAAO,CACT,CAAC,OAAQ,cACT,CAACyB,EAAWR,IAGLS,EAAI,EAAGA,GAAKL,EAAeK,IAAK,CACvC,IACMC,EADiB3B,EAAK0B,EAAI,GAAG,GACJP,EAC3BS,EAAgBT,GAAiBJ,EAAIY,GAAS,EAAIA,IAClDC,GAAiBT,IACnBS,EAAgBT,GAGlBnB,EAAK6B,KAAK,CAACJ,EAAYC,EAAGI,SAASF,KAGrC,OAAO5B,EDVH+B,CACEhB,EACAE,EACAE,GACA,IAAIa,MAAOC,cACXZ,KASN,OAJAa,qBAAU,WACRV,MACC,CAACT,EAAGE,EAAiBE,EAAeE,IAGrC,sBAAKc,UAAU,MAAf,UACE,sBACEA,UAAU,UACVC,MAAO,CACLC,QAAS,OACTC,eAAgB,eAChBC,UAAW,QALf,UAQE,sBAAKJ,UAAU,IAAf,UACE,uBACEK,GAAG,UACHC,KAAK,QACLC,IAAI,KACJC,IAAI,IACJC,MAAO7B,EACP8B,SAAU,SAACC,GACT9B,EAAK+B,OAAOD,EAAEE,OAAOJ,SAEvBK,KAAK,QAEP,qCAAQlC,QAEV,sBAAKoB,UAAU,mBAAf,UACE,uBACEK,GAAG,UACHC,KAAK,QACLC,IAAI,MACJC,IAAKxB,EAAgB,IACrByB,MAAO3B,EACP4B,SAAU,SAACC,GACT5B,EAAmB6B,OAAOD,EAAEE,OAAOJ,SAErCK,KAAK,QAEP,oDAAuBhC,QAEzB,sBAAKkB,UAAU,iBAAf,UACE,uBACEK,GAAG,UACHC,KAAK,QACLC,IAAKzB,EAAkB,IACvB0B,IAAI,QACJC,MAAOzB,EACP0B,SAAU,SAACC,GACT1B,EAAiB2B,OAAOD,EAAEE,OAAOJ,SAEnCK,KAAK,QAEP,kDAAqB9B,QAEvB,sBAAKgB,UAAU,kBAAf,UACE,uBACEK,GAAG,UACHC,KAAK,QACLC,IAAI,KACJC,IAAI,MACJC,MAAOvB,EACPwB,SAAU,SAACC,GACTxB,EAAiByB,OAAOD,EAAEE,OAAOJ,SAEnCK,KAAK,MAEP,mDAAsB5B,WAG1B,qBACEc,UAAU,QACVC,MAAO,CACLC,QAAS,OACTC,eAAgB,gBAJpB,SAOmB,IAAhBtC,EAAKkD,QAAgB,cAAC,EAAD,CAAOlD,KAAMA,UEhG3CmD,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,cAAc,Y","file":"static/js/main.cccdfbd6.chunk.js","sourcesContent":["import React from 'react'\r\nimport Chart from 'react-google-charts'\r\n\r\nconst Graph = ({ data }) => {\r\n  return (\r\n    <div>\r\n      <Chart\r\n        width={'600px'}\r\n        height={'400px'}\r\n        chartType='LineChart'\r\n        loader={<div>Loading Chart</div>}\r\n        data={data}\r\n        options={{\r\n          title: 'Logistic Map',\r\n          explorer: { axis: 'horizontal', keepInBounds: true },\r\n          hAxis: {\r\n            title: 'Year',\r\n          },\r\n          vAxis: {\r\n            minValue: '0',\r\n            title: 'Population',\r\n          },\r\n        }}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Graph\r\n","import React, { useEffect, useState } from 'react'\nimport Graph from './Graph'\nimport { simulateYears } from './Utils/simulator'\n\nconst App = () => {\n  const [r, setR] = useState(2.9)\n  const [startPopulation, setStartPopulation] = useState(200)\n  const [maxPopulation, setMaxPopulation] = useState(700)\n  const [numberOfYears, setNumberOfYears] = useState(50)\n  const [data, setData] = useState([])\n\n  const updateData = () => {\n    setData(\n      simulateYears(\n        r,\n        startPopulation,\n        maxPopulation,\n        new Date().getFullYear(),\n        numberOfYears\n      )\n    )\n  }\n\n  useEffect(() => {\n    updateData()\n  }, [r, startPopulation, maxPopulation, numberOfYears])\n\n  return (\n    <div className='App'>\n      <div\n        className='options'\n        style={{\n          display: 'flex',\n          justifyContent: 'space-evenly',\n          marginTop: '50px',\n        }}\n      >\n        <div className='r'>\n          <input\n            id='typeinp'\n            type='range'\n            min='-2'\n            max='4'\n            value={r}\n            onChange={(e) => {\n              setR(Number(e.target.value))\n            }}\n            step='0.1'\n          />\n          <div>r={r}</div>\n        </div>\n        <div className='start-population'>\n          <input\n            id='typeinp'\n            type='range'\n            min='100'\n            max={maxPopulation - 100}\n            value={startPopulation}\n            onChange={(e) => {\n              setStartPopulation(Number(e.target.value))\n            }}\n            step='100'\n          />\n          <div>Start Population={startPopulation}</div>\n        </div>\n        <div className='max-population'>\n          <input\n            id='typeinp'\n            type='range'\n            min={startPopulation + 100}\n            max='10000'\n            value={maxPopulation}\n            onChange={(e) => {\n              setMaxPopulation(Number(e.target.value))\n            }}\n            step='100'\n          />\n          <div>Max Population={maxPopulation}</div>\n        </div>\n        <div className='number-of-years'>\n          <input\n            id='typeinp'\n            type='range'\n            min='10'\n            max='300'\n            value={numberOfYears}\n            onChange={(e) => {\n              setNumberOfYears(Number(e.target.value))\n            }}\n            step='1'\n          />\n          <div>Number Of Years={numberOfYears}</div>\n        </div>\n      </div>\n      <div\n        className='graph'\n        style={{\n          display: 'flex',\n          justifyContent: 'space-evenly',\n        }}\n      >\n        {data.length !== 0 && <Graph data={data} />}\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","export const simulateYears = (\r\n  r,\r\n  startPopulation,\r\n  maxPopulation,\r\n  startYear,\r\n  numberOfYears\r\n) => {\r\n  let data = [\r\n    ['Year', 'Population'],\r\n    [startYear, startPopulation],\r\n  ]\r\n\r\n  for (let i = 2; i <= numberOfYears; i++) {\r\n    const prevPopulation = data[i - 1][1]\r\n    const ratio = prevPopulation / maxPopulation\r\n    let newPopulation = maxPopulation * (r * ratio * (1 - ratio))\r\n    if (newPopulation >= maxPopulation) {\r\n      newPopulation = maxPopulation\r\n    }\r\n\r\n    data.push([startYear + i, parseInt(newPopulation)])\r\n  }\r\n\r\n  return data\r\n}\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.querySelector('#root')\n)\n"],"sourceRoot":""}